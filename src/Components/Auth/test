import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Typography, TextField, Button, Container } from '@mui/material';

const Login = ({accessToken, setAccessToken}) => {

  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [errors, setErrors] = useState('');
  const [csrfToken, setCsrfToken] = useState('');

  useEffect(() => {
    // Fetch CSRF token from your Laravel backend
    const fetchCsrfToken = async () => {
      try {
        const response = await axios.get('http://127.0.0.1:8000/sanctum/csrf-cookie');
        setCsrfToken(response.data.csrfToken);
      } catch (error) {
        console.error('Failed to fetch CSRF token:', error);
      }
    };

    fetchCsrfToken();
  }, []);

  const handleLogin = async () => {
    try {
      const loginResponse = await axios.post(
        'http://127.0.0.1:8000/api/login',
        {
          email: email,
          password: password,
        },
        {
          headers: {
            'X-CSRF-TOKEN': csrfToken,
          },
        }
      );

      // Set access token in state
      setAccessToken(loginResponse.data.access_token);

      // Clear form fields and errors
      setEmail('');
      setPassword('');
      setErrors('');
        console.log('login successfull')
      // Redirect to dashboard after successful login
      //history.push('/');
    } catch (error) {
      if (error.response) {
        setErrors(error.response.data.message);
      } else {
        console.error('An error occurred:', error.message);
      }
    }
  };

  const handleLogout = async () => {
    try {
      // Call the logout endpoint to invalidate the token
      await axios.post(
        'http://127.0.0.1:8000/api/logout',
        {},
        {
          headers: {
            'Authorization': `Bearer ${accessToken}`,
          },
        }
      );

      // Clear access token
      setAccessToken('');
    } catch (error) {
      console.error('Logout failed:', error.message);
    }
  };

  return (
    <Container maxWidth="sm">
      <Typography variant="h4" gutterBottom>
        Login
      </Typography>
      {accessToken ? (
        <div>
          <Typography variant="body1">You are logged in!</Typography>
          <Button variant="contained" color="primary" onClick={handleLogout}>
            Logout
          </Button>
        </div>
      ) : (
        <div>
          <form onSubmit={(e) => e.preventDefault()}>
            <TextField
              type="email"
              label="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              autoComplete="email"
              fullWidth
              required
              margin="normal"
            />
            <TextField
              type="password"
              label="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              autoComplete="current-password"
              fullWidth
              required
              margin="normal"
            />
            <Button variant="contained" color="primary" onClick={handleLogin}>
              Login
            </Button>
          </form>
          {errors && <Typography color="error">{errors}</Typography>}
        </div>
      )}
    </Container>
  );
};

export default Login;